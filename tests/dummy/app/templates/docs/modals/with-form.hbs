<h1>Modal With Form</h1>

<p>Let's create a modal with form. It'll be a component called
  <code>modal-with-form</code>.</p>

<p>Any modal that extends
  <code>components/ebmm-modals-container/base</code>
  can be managed with
  <code>modals-manager</code>:</p>

<CodeBlockExample
  @snippetName="modal-with-form-skeleton.js"
  @title="Skeleton for the new Modal (JS)"
/>

<CodeBlockExample
  @snippetName="modal-with-form-skeleton.hbs"
  @title="Skeleton for the new Modal (HBS)"
/>

<p>Attribute
  <code>modalIsOpened</code>
  is declared in the
  <code>Base</code>-modal. Its value is set in the modals-manager and represents
  modal's state (is it opened or closed). Action handlers
  <code>confirm</code>
  and
  <code>decline</code>
  are used to "proceed" modal. Both of them are also declared in the
  <code>Base</code>-modal. Confirmation can be done by clicking on "confirm"
  button (e.g. 'OK', 'Yes', 'Confirm' etc). Any other modal-closing is going to
  be processed as "decline".</p>

<p>Footer for modal is going to by like this:</p>

<CodeBlockExample
  @snippetName="modal-with-form-footer.hbs"
  @title="Modal's footer"
/>

<p>It has two buttons - Create and Cancel. First one is 'Confirm' and second one
  is 'Decline'. Click-handlers for them are taken from
  <code>modal</code>-hash.</p>

<p>Finally, let's add a form to the modal's body. It's going to be not a simple
  form and a form with validations. So, extra addon called
  <code>ember-bootstrap-changeset-validations</code>
  is used. It can be installed with next command:</p>

<CodeBlock @code="ember i ember-bootstrap-changeset-validations" />
<p></p>

<p>Forms in the
  <code>ember-bootstrap</code>
  require
  <code>model</code>-property. It can be a model from your application or any
  other object. Let's create a property called
  <code>formData</code>
  in the component
  <code>modal-with-form</code>:</p>

<CodeBlockExample
  @snippetName="modal-with-form.js"
  title="components/modal-with-form.js"
/>
<p></p>

<p>Here validations are added "in-place" where object is defined. More about
  validations is in the
  <a
    target="_blank"
    href="https://github.com/kaliber5/ember-bootstrap-changeset-validations#usage"
    rel="noopener noreferrer"
  >ember-bootstrap-changeset-validations#usage</a>
  and
  <a
    target="_blank"
    href="https://github.com/poteto/ember-changeset#usage"
    rel="noopener noreferrer"
  >ember-changeset#usage</a>
  itself.</p>

<p>Modal's body with form is:</p>

<CodeBlockExample
  @snippetName="modal-with-form.hbs"
  @title="templates/components/modal-with-form.hbs"
/>

<p>Form has three inputs for fields
  <code>firstName</code>,
  <code>lastName</code>
  and
  <code>email</code>. All of them are described in the `formData` and has
  validation requirements.</p>

<BsAlert @visible={{true}} @type="warning" @dismissible={{false}}>
  <i class="bi bi-exclamation-triangle-fill me-2"></i>
  <code>onSubmit</code>-handler is
  <code>this.confirm</code>
  and not
  <code>modal.submit</code>!
</BsAlert>

<p>Full component's example you can check on
  <LinkTo @route="demo">demo-page</LinkTo>.</p>

<blockquote>
  Form from
  <code>modal.body</code>
  can be moved to the separated component. In this case "submit"-handler should
  be passed on it and
  <code>formData</code>
  should be declared in the new form-component and not in the modal.
</blockquote>

<p>Last question is how to use this modal with
  <code>modals-manager</code>? It can be used with method
  <code>show</code>:</p>

<CodeBlockExample
  @snippetName="with-form-demo-controller.js"
  @title="Modal With Form usage"
/>