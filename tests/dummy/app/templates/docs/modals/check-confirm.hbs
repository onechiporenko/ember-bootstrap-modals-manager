<h1><code>checkConfirm</code></h1>

<p>Almost same as <code>promptConfirm</code> however it contains a checkbox instead of text-field. "Yes"-button is disabled until checkbox is not checked.</p>

<CodeBlockExample @snippetName="check-confirm-demo-controller.js" @title="Check Confirm Modal"/>

<h2>Customization</h2>

<CodeBlockExample @snippetName="check-confirm-custom-demo-controller.js" @title="Custom Check Confirm Modal"/>

<h3>Title Component</h3>

<p>It takes a single parameter <code>options</code>. Its value is an object passed to the <code>modalsManager.prompt</code>.</p>

<CodeBlockExample @snippetName="components-custom-check-confirm-header.hbs" @title="components/custom-check-confirm-header.hbs"/>

<h3>Body Component</h3>

<p>It takes two parameters. First one is an <code>options</code> described before. Second one is an action <code>updatePromptValue</code>. It's used to update prompted value in the modal-scope. Usage example:</p>

<CodeBlockExample @snippetName="components-custom-check-confirm-body.hbs" @title="components/custom-check-confirm-body.hbs"/>

<h3>Footer Component</h3>

<p>It takes four parameters. First one is an <code>options</code> described before. Second one is a <code>confirmDisabled</code>. This flag determines if confirm-button should be disabled. Last two are actions <code>confirm</code> and <code>decline</code> used as click-handler for "Yes" and "No" buttons. Usage example:</p>

<CodeBlockExample @snippetName="components-custom-check-confirm-footer.hbs" @title="components/custom-check-confirm-footer.hbs"/>
